{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Add NAT Setting",
   "Mappings":{
      "Region2Principal":{
         "us-east-1":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "us-west-2":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "us-west-1":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "eu-west-1":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "ap-southeast-1":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "ap-northeast-1":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "ap-southeast-2":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "sa-east-1":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         },
         "cn-north-1":{
            "EC2Principal":"ec2.amazonaws.com.cn",
            "OpsWorksPrincipal":"opsworks.amazonaws.com.cn"
         },
         "eu-central-1":{
            "EC2Principal":"ec2.amazonaws.com",
            "OpsWorksPrincipal":"opsworks.amazonaws.com"
         }
      }
   },
   "Parameters":{
      "SystemName":{
         "Default":"Central Storage",
         "Description":"System Name",
         "Type":"String"
      },
      "CIDRPrefix":{
         "Default":"10.0",
         "Description":"network cidr prefix",
         "Type":"String",
         "MinLength":"1",
         "MaxLength":"8",
         "ConstraintDescription":"Length is too long"
      },
      "NatInstanceClass":{
         "Default":"t1.micro",
         "Description":"NAT EC2 instance class",
         "Type":"String",
         "AllowedValues":[
            "t1.micro",
            "t2.micro",
            "m1.small",
            "m1.large",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "c1.medium",
            "c1.xlarge"
         ],
         "ConstraintDescription":"Please check AllowedValues if constraint happens"
      },
      "VPC":{
         "Description":"VPC ID",
         "Type":"String"
      },
      "SubnetPublicA":{
         "Description":"Default subnet of OpWorks",
         "Type":"String"
      },
      "SubnetPublicB":{
         "Description":"Default subnet of OpWorks",
         "Type":"String"
      }
   },
   "Resources":{
      "OpsWorksInstanceRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           {
                              "Fn::FindInMap":[
                                 "Region2Principal",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "EC2Principal"
                              ]
                           }
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "Policies":[
               {
                  "PolicyName":"nat-opsworks",
                  "PolicyDocument":{
                     "Statement":[
                        {
                           "Effect":"Allow",
                           "NotAction":"iam:*",
                           "Resource":"*"
                        }
                     ]
                  }
               }
            ]
         }
      },
      "OpsWorksInstanceProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "DependsOn":[
            "OpsWorksInstanceRole"
         ],
         "Properties":{
            "Path":"/",
            "Roles":[
               {
                  "Ref":"OpsWorksInstanceRole"
               }
            ]
         }
      },
      "NATStack":{
         "Type":"AWS::OpsWorks::Stack",
         "DependsOn":[
            "OpsWorksInstanceProfile"
         ],
         "Properties":{
            "Name":{
               "Fn::Join":[
                  "-",
                  [
                     "nat",
                     {
                        "Ref":"SystemName"
                     }
                  ]
               ]
            },
            "ServiceRoleArn":{
               "Fn::Join":[
                  "",
                  [
                     "arn:aws:iam::",
                     {
                        "Ref":"AWS::AccountId"
                     },
                     ":role/",
                     "aws-opsworks-service-role"
                  ]
               ]
            },
            "DefaultInstanceProfileArn":{
               "Fn::GetAtt":[
                  "OpsWorksInstanceProfile",
                  "Arn"
               ]
            },
            "UseOpsworksSecurityGroups":"true",
            "UseCustomCookbooks":"true",
            "CustomCookbooksSource":{
               "Type":"git",
               "Url":"https://github.com/msfuko/opsworks-extended-cookbooks.git"
            },
            "ConfigurationManager":{
               "Name":"Chef",
               "Version":"11.10"
            },
            "ChefConfiguration":{
               "BerkshelfVersion":"3.1.3",
               "ManageBerkshelf":"true"
            },
            "VpcId":{
               "Ref":"VPC"
            },
            "DefaultSubnetId":{
               "Ref":"SubnetPublicA"
            }
         }
      },
      "NATLayer":{
         "Type":"AWS::OpsWorks::Layer",
         "Properties":{
            "StackId":{
               "Ref":"NATStack"
            },
            "Type":"custom",
            "Shortname":"nat",
            "EnableAutoHealing":"true",
            "AutoAssignElasticIps":"true",
            "AutoAssignPublicIps":"false",
            "Name":"NATLayer"
         }
      },
      "myAppInstanceA":{
         "Type":"AWS::OpsWorks::Instance",
         "Properties":{
            "StackId":{
               "Ref":"NATStack"
            },
            "LayerIds":[
               {
                  "Ref":"NATLayer"
               }
            ],
            "InstanceType":{
               "Ref":"NatInstanceClass"
            },
            "SubnetId":{
               "Ref":"SubnetPublicA"
            }
         }
      },
      "myAppInstanceB":{
         "Type":"AWS::OpsWorks::Instance",
         "Properties":{
            "StackId":{
               "Ref":"NATStack"
            },
            "LayerIds":[
               {
                  "Ref":"NATLayer"
               }
            ],
            "InstanceType":{
               "Ref":"NatInstanceClass"
            },
            "SubnetId":{
               "Ref":"SubnetPublicB"
            }
         }
      },
      "SubnetPrivateA":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Fn::Join":[
                  ".",
                  [
                     {
                        "Ref":"CIDRPrefix"
                     },
                     "11.0/24"
                  ]
               ]
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  "0",
                  {
                     "Fn::GetAZs":""
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        ".",
                        [
                           {
                              "Ref":"SystemName"
                           },
                           "subnet",
                           "private",
                           "a"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "SubnetPrivateB":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Fn::Join":[
                  ".",
                  [
                     {
                        "Ref":"CIDRPrefix"
                     },
                     "12.0/24"
                  ]
               ]
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  "1",
                  {
                     "Fn::GetAZs":""
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        ".",
                        [
                           {
                              "Ref":"SystemName"
                           },
                           "subnet",
                           "private",
                           "b"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "RouteTableInternalA":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        ".",
                        [
                           {
                              "Ref":"SystemName"
                           },
                           "routetable",
                           "internal",
                           "a"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "RouteTableInternalB":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Fn::Join":[
                        ".",
                        [
                           {
                              "Ref":"SystemName"
                           },
                           "routetable",
                           "internal",
                           "b"
                        ]
                     ]
                  }
               }
            ]
         }
      },
      "SubnetRouteTableInternalAssociationA":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"SubnetPrivateA"
            },
            "RouteTableId":{
               "Ref":"RouteTableInternalA"
            }
         }
      },
      "SubnetRouteTableInternalAssociationB":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"SubnetPrivateB"
            },
            "RouteTableId":{
               "Ref":"RouteTableInternalB"
            }
         }
      }
   },
   "Outputs":{
      "RouteTableInternalA":{
         "Value":{
            "Ref":"RouteTableInternalA"
         }
      },
      "RouteTableInternalB":{
         "Value":{
            "Ref":"RouteTableInternalB"
         }
      },
      "myAppInstanceA":{
         "Value":{
            "Ref":"myAppInstanceA"
         }
      },
      "myAppInstanceB":{
         "Value":{
            "Ref":"myAppInstanceB"
         }
      }
   }
}